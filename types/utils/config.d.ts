export function getVaultProgramId(): string;
export function getTokenProgramId(): string;
export function getVaultInfoAccount(name: any): string;
export function getVaultOldInfoAccount(name: any): string;
export function getVaultAccount(name: any): string;
export function getVaultLpTokenAccount(name: any): string;
export function getVaultPdaAccount(name: any): string;
export function getVaultRewardAccountA(name: any): string;
export function getVaultRewardAccountB(name: any): string;
export function getVaultVersion(name: any): string;
export function getVaultTulipTokenAccount(name: any): string;
export function getVaultTulipRewardPerSlot(name: any): number;
export function getVaultTulipRewardEndSlot(name: any): number;
export function getVaultTulipMint(name: any): string;
export function getVaultSerumOpenOrdersAccount(name: any): string;
export function getVaultSerumVaultSigner(name: any): string;
export function isVersionFourOrFive(name: any): boolean;
export function getFarmProgramId(name: any): string;
export function getFarmPoolId(name: any): string;
export function getFarmPoolAuthority(name: any): string;
export function getFarmLpMintAddress(name: any): string;
export function getFarmPoolLpTokenAccount(name: any): string;
export function getFarmPoolRewardATokenAccount(name: any): string;
export function getFarmPoolRewardBTokenAccount(name: any): string;
export function getFarmFusion(name: any): boolean;
export function getFarmPoolCoinTokenaccount(name: any): string;
export function getFarmPoolPcTokenaccount(name: any): string;
export function getFarmAmmId(name: any): string;
export function getFarmAmmOpenOrders(name: any): string;
export function getFarmSerumProgramId(name: any): string;
export function getLendingProgramId(): string;
export function getLendingFarmProgramId(): string;
export function getLendingMarketAccount(): string;
export function getLendingFarmManagementAccount(): string;
export function getLendingFarmAccount(name: any): {
    name: string;
    account: string;
    account_nonce: number;
    serum_market: string;
    solfarm_vault_program: string;
    serum_request_queue: string;
    serum_event_queue: string;
    serum_market_bids: string;
    serum_market_asks: string;
    serum_coin_vault_account: string;
    serum_pc_vault_account: string;
    serum_fee_recipient: string;
    serum_dex_program: string;
    raydium_lp_mint_address: string;
    raydium_amm_id: string;
    raydium_amm_authority: string;
    raydium_amm_open_orders: string;
    raydium_amm_quantities_or_target_orders: string;
    raydium_liquidity_program: string;
    raydium_coin_token_account: string;
    raydium_pc_token_account: string;
    raydium_pool_temp_token_account: string;
    raydium_pool_withdraw_queue: string;
    lending_market: string;
    lending_program: string;
    base_token_mint: string;
    quote_token_mint: string;
    farm_key: number;
    vault_account: string;
    vault_info_account: string;
    old_vault_info_account: string;
    coin_reserve_liquidity_fee_receiver: string;
    pc_reserve_liquidity_fee_receiver: string;
    farm_open_orders: string;
    farm_base_token_account: string;
    farm_quote_token_account: string;
    only_pc_borrow: boolean;
    buy_slip?: undefined;
    sell_slip?: undefined;
} | {
    name: string;
    account: string;
    account_nonce: number;
    serum_market: string;
    solfarm_vault_program: string;
    serum_request_queue: string;
    serum_event_queue: string;
    serum_market_bids: string;
    serum_market_asks: string;
    serum_coin_vault_account: string;
    serum_pc_vault_account: string;
    serum_fee_recipient: string;
    serum_dex_program: string;
    raydium_lp_mint_address: string;
    raydium_amm_id: string;
    raydium_amm_authority: string;
    raydium_amm_open_orders: string;
    raydium_amm_quantities_or_target_orders: string;
    raydium_liquidity_program: string;
    raydium_coin_token_account: string;
    raydium_pc_token_account: string;
    raydium_pool_temp_token_account: string;
    raydium_pool_withdraw_queue: string;
    lending_market: string;
    lending_program: string;
    base_token_mint: string;
    quote_token_mint: string;
    farm_key: number;
    vault_account: string;
    vault_info_account: string;
    old_vault_info_account: string;
    coin_reserve_liquidity_fee_receiver: string;
    pc_reserve_liquidity_fee_receiver: string;
    farm_open_orders: string;
    farm_base_token_account: string;
    farm_quote_token_account: string;
    only_pc_borrow: boolean;
    buy_slip: number;
    sell_slip: number;
};
export function getLendingReserve(name: any): {
    name: string;
    account: string;
    liquidity_supply_token_mint: string;
    liquidity_supply_token_account: string;
    liquidity_fee_receiver: string;
    collateral_token_mint: string;
    collateral_token_supply: string;
    destination_collateral_token_account: string;
    quote_token_mint: string;
    platform_fees: number;
    config: {
        optimal_utilization_rate: number;
        loan_to_value_ratio: number;
        liquidation_bonus: number;
        liquidation_threshold: number;
        min_borrow_rate: number;
        optimal_borrow_rate: number;
        max_borrow_rate: number;
        degen_borrow_rate: number;
        degen_utilization_rate: number;
        fees: {
            borrow_fee_wad: number;
            flash_loan_fee_wad: number;
            host_fee_percentage: number;
        };
    };
};
export function getLendingReserveFromKey(key: any): {
    name: string;
    account: string;
    liquidity_supply_token_mint: string;
    liquidity_supply_token_account: string;
    liquidity_fee_receiver: string;
    collateral_token_mint: string;
    collateral_token_supply: string;
    destination_collateral_token_account: string;
    quote_token_mint: string;
    platform_fees: number;
    config: {
        optimal_utilization_rate: number;
        loan_to_value_ratio: number;
        liquidation_bonus: number;
        liquidation_threshold: number;
        min_borrow_rate: number;
        optimal_borrow_rate: number;
        max_borrow_rate: number;
        degen_borrow_rate: number;
        degen_utilization_rate: number;
        fees: {
            borrow_fee_wad: number;
            flash_loan_fee_wad: number;
            host_fee_percentage: number;
        };
    };
};
export function getPriceFeedsForReserve(name: any): {
    name: string;
    quote_currency_mint: string;
    exponent: number;
    init_price: number;
    price_account: string;
    product_account: string;
};
export function isSupportedLendingFarm(name: any): boolean;
export function getLendingReserveByAccount(account: any): {
    name: string;
    account: string;
    liquidity_supply_token_mint: string;
    liquidity_supply_token_account: string;
    liquidity_fee_receiver: string;
    collateral_token_mint: string;
    collateral_token_supply: string;
    destination_collateral_token_account: string;
    quote_token_mint: string;
    platform_fees: number;
    config: {
        optimal_utilization_rate: number;
        loan_to_value_ratio: number;
        liquidation_bonus: number;
        liquidation_threshold: number;
        min_borrow_rate: number;
        optimal_borrow_rate: number;
        max_borrow_rate: number;
        degen_borrow_rate: number;
        degen_utilization_rate: number;
        fees: {
            borrow_fee_wad: number;
            flash_loan_fee_wad: number;
            host_fee_percentage: number;
        };
    };
};
